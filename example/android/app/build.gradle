plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterCompileSdkVersion = '35'
def flutterTargetSdkVersion = '34'

def flutterMinSdkVersion = localProperties.getProperty('flutter.minSdkVersion')
if (flutterMinSdkVersion == null) {
    flutterMinSdkVersion = '21'
}

def flutterNdkVersion = localProperties.getProperty('flutter.ndkVersion')
if (flutterNdkVersion == null) {
    flutterNdkVersion = '29.0.13113456'
}

def versionBuildTools = localProperties.getProperty('flutter.versionBuildTools')
if (versionBuildTools == null) {
    versionBuildTools = '35.0.0'
}

android {
    namespace = "pl.pszklarska.beacon_broadcast_example"
    compileSdk flutterCompileSdkVersion.toInteger()
    buildToolsVersion versionBuildTools
    ndkVersion flutterNdkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    defaultConfig {
        applicationId "pl.pszklarska.beacon_broadcast_example"
        multiDexEnabled true
        minSdk = flutterMinSdkVersion.toInteger()
        targetSdkVersion flutterTargetSdkVersion.toInteger()
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}